{"mappings":"ACEA,IAAM,EAAK,SAAS,aAAa,CAAC,MAC5B,EAAW,EAAG,gBAAgB,CAAC,MAE/B,EAAW,EAAE,CAGd,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,KAAA,E,G,CAAL,IAAA,IAAK,EAAA,EAAY,CAAA,CAAA,OAAA,QAAA,CAAA,GAAZ,CAAA,CAAA,EAAA,AAAA,CAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,AAAA,EAAA,EAAL,CAAA,EAAA,CAAK,IAAM,EAAN,EAAA,KAAA,CACH,EAAS,IAAI,CAAC,E,C,C,M,E,CADX,EAAA,CAAA,EAAA,EAAA,C,Q,C,G,CAAA,GAAA,AAAA,MAAA,EAAA,MAAA,EAAA,EAAA,MAAA,E,Q,CAAA,GAAA,EAAA,MAAA,C,C,CAUL,SAAS,EAAQ,CAAO,EACtB,OAAO,WAAW,EAAQ,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,IAAK,KAAK,KAAK,CAAC,GACnE,EAeA,AAPA,SAAsB,CAAI,EACnB,IAAA,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,KAAA,E,G,CAAL,IAAA,IAAK,EAAA,EAAY,CAAA,CAAA,OAAA,QAAA,CAAA,GAAZ,CAAA,CAAA,EAAA,AAAA,CAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,AAAA,EAAA,EAAL,CAAA,EAAA,CAAK,IAAM,EAAN,EAAA,KAAA,CACH,EAAG,WAAW,CAAC,E,C,C,M,E,CADZ,EAAA,CAAA,EAAA,EAAA,C,Q,C,G,CAAA,GAAA,AAAA,MAAA,EAAA,MAAA,EAAA,EAAA,MAAA,E,Q,CAAA,GAAA,EAAA,MAAA,C,C,CAGP,EARS,AAWa,EAXR,IAAI,CAAC,SAAC,CAAA,CAAG,CAArB,EAA2B,OAAA,EAAQ,GAAK,EAAQ,E","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nvar ul = document.querySelector(\"ul\");\nvar listInfo = ul.querySelectorAll(\"li\");\n// create a dataBase\nvar dataBase = [];\nvar _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\ntry {\n    // add a data to dataBase\n    for(var _iterator = listInfo[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n        var li = _step.value;\n        dataBase.push(li);\n    }\n} catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n} finally{\n    try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n        }\n    } finally{\n        if (_didIteratorError) {\n            throw _iteratorError;\n        }\n    }\n}\n// // create a convert function helper\n// function convert(string) {\n//   return parseFloat(string.replace(',', '.').slice(1));\n// }\n// upgrade 2.0\nfunction convert(employe) {\n    return parseFloat(employe.dataset.salary.replace(\",\", \".\").slice(1));\n}\n// imlement a sort algorythm\nfunction sortList(list) {\n    return list.sort(function(a, b) {\n        return convert(b) - convert(a);\n    });\n}\n// change list to a sorted list\nfunction getEmployees(list) {\n    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n    try {\n        for(var _iterator = list[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n            var li = _step.value;\n            ul.appendChild(li);\n        }\n    } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n    } finally{\n        try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n                _iterator.return();\n            }\n        } finally{\n            if (_didIteratorError) {\n                throw _iteratorError;\n            }\n        }\n    }\n}\n// final step :)\ngetEmployees(sortList(dataBase));\n\n//# sourceMappingURL=index.07921ac1.js.map\n","'use strict';\n\nconst ul = document.querySelector('ul');\nconst listInfo = ul.querySelectorAll('li');\n// create a dataBase\nconst dataBase = [];\n\n// add a data to dataBase\nfor (const li of listInfo) {\n  dataBase.push(li);\n}\n\n// // create a convert function helper\n// function convert(string) {\n//   return parseFloat(string.replace(',', '.').slice(1));\n// }\n\n// upgrade 2.0\nfunction convert(employe) {\n  return parseFloat(employe.dataset.salary.replace(',', '.').slice(1));\n}\n\n// imlement a sort algorythm\nfunction sortList(list) {\n  return list.sort((a, b) => convert(b) - convert(a));\n}\n\n// change list to a sorted list\nfunction getEmployees(list) {\n  for (const li of list) {\n    ul.appendChild(li);\n  }\n}\n\n// final step :)\ngetEmployees(sortList(dataBase));\n"],"names":["ul","document","querySelector","listInfo","querySelectorAll","dataBase","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","li","value","push","err","return","convert","employe","parseFloat","dataset","salary","replace","slice","getEmployees","list","appendChild","sort","a","b"],"version":3,"file":"index.07921ac1.js.map"}